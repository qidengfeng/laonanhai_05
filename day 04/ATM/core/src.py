#!/usr/bin/env python 3.9# coding:utf-8from core import accountsfrom lib import common"""0.退出 1.登录 2.注册 3.查看余额 4.转账 5.还款 6.取款 7.查看流水 8.购物 9.查看购买商品"""token = Nonedef quit_interface():  # 0.退出    print("退出".center(50, "*"),"确认退出请输入：Q")def login_interface():  # 1.登录    res = accounts.select_db_info()  # 1.获取用户信息    uname = input("输入用户名").strip()    if uname in res.keys():  # 2.判断用户名是否存在        print("用户存在请输入密码".center(80, "*"))        pwd = input("输入密码").strip()        if pwd == res[uname]:  # 3.根据用户名判断密码属否输入正确            print("登录成功继续操作请选择".center(80, "*"))            global token  # 修改全局默认签名            token = uname            print(token)            return token            # 4.登录成功开始进行编写登录装饰器，附件给            # 0.退出  3.查看余额 4.转账 5.还款 6.取款 7.查看流水 8.购物 9.查看购买商品        else:            print("密码输入错误".center(80, "*"))    else:        print("不再".center(80, "*"))    print("登录".center(80, "*"))def register_interface():  # 2.注册    res = accounts.select_db_info()  # 1.获取已经注册的用户信息    uname = input("请输入用户名>>>:").strip()    if uname not in res:  # 2.判断用户名是否存在，如果不存在则执行此代码        pwd = input("请输入密码>>>:").strip()        accounts.save_db_info(uname, pwd)    if uname in res:  # 3.判断用户名是否存在,如果存在则执行此代码        print("用户名已经存在".center(80, "*"))    print("注册 成功".center(80, "*"))@common.login_autodef select_balance_interface():  # 3.查看余额    print("查看余额".center(50, "*"))    accounts.select_balance(token)@common.login_autodef transfer_accounts_interface():  # 4.转账    print("转帐".center(50, "*"))    chamberlain=input("请输入收款人姓名：")    chamberlain_money=input("请输入收款金额：")    accounts.save_transfer(token,chamberlain,chamberlain_money)#调用数据更新接口@common.login_autodef repayment_interface():  # 5还款    print("还款".center(50, "*"))    repayment = input("请输入还款金额：").strip()    accounts.repayment(token,repayment)@common.login_autodef withdraw_money_interface():  # 6取款    print("取款".center(50, "*"))    money=input("请输入取款金额：").strip()    accounts.withdraw_money(token,money)@common.login_autodef select_flowing_water_interface():  # 7.查看流水    print("查看流水".center(50, "*"))    res=accounts.View_flow(token)    if res:        for lines in res:            print(lines)    else:print("您的流水信息为空".center(50,"*"))@common.login_autodef shopping_interface():  # 8.购物    print("购物".center(50, "*"))    accounts.select_commodity()#1.查看所有商品信息    shopping_class=input("请输入选择购买的商品种类编号").strip()#2.输入需要购买商品的商品种类编号    shopping_car=input("请输入选择购买的商品编号").strip()#2.输入需要购买商品的商品编号    shopping_num=input("请输入需要购买的商品数量").strip()#2.输入需要购买商品的商品数量    accounts.shopping_cart(token, shopping_class,shopping_car,shopping_num)@common.login_autodef select_Purchase_goods_interface():  # 9.查看购买商品    print("查看已经购买的商品".center(50, "*"))    res=accounts.select_shopping_cart(token)    if res:        for lines in res:            print(lines)    else:        print("您还为购买任何商品")dic_user = {    "0": ("退出", quit_interface),    "1": ("登录", login_interface),    "2": ("注册", register_interface),    "3": ("查看余额", select_balance_interface),    "4": ("转账", transfer_accounts_interface),    "5": ("还款", repayment_interface),    "6": ("取款", withdraw_money_interface),    "7": ("查看流水", select_flowing_water_interface),    "8": ("购物", shopping_interface),    "9": ("购买商品", select_Purchase_goods_interface)}def run():    while True:        for k in dic_user:            print(k, dic_user[k][0].center(80, "*"))        choice = input("请选择>>>:").strip()        if choice == "Q":            break        if choice not in dic_user:            print("输入错误".center(50, "*"))            continue        dic_user[choice][1]()if __name__ == '__main__':    run()