#!/usr/bin/env python 3.9# coding:utf-8import osimport timeimport jsonfrom conf import settingfrom lib.common import Logging_infodef select_db_info():    """    获取所有账户信息    :return: 以字典的形式返回读取的所有数据    """    file = os.path.join(setting.Path_base, "db", "user_pwd_info")    with open(file, mode="rt", encoding="utf8") as f:        dic_info = {}        for lines in f:            res = lines.strip().split(",")            # print(res[0],res[1])            dic_info[res[0]] = res[1]        print(dic_info)        return dic_infodef save_db_info(uname, pwd):    """    :param uname: 用户名    :param pwd: 密码    保存写入用户名密码信息    """    file = os.path.join(setting.Path_base, "db", "user_pwd_info")  # 1.获取文件路径    with open(file=file, mode="a+", encoding="utf8") as f:  # 2.写入文件信息        f.seek(2)        f.write("\n")        f.write(f"{uname},{pwd}")def select_balance(username):    """    根据用户名查询用户金额    :param username: 用户名    :return: 打印金额信息    """    file = os.path.join(setting.Path_base, "db", "golden_info.txt")  # 1.获取金额的文件路径    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            res = lines.strip().split(",")            if username == res[0]:                print(f"尊敬的{username},您的账户余额为{res[1]}元")                return res[1]def save_transfer(token, chamberlain, chamberlain_money):    """    :param token: 转账用户    :param chamberlain: 收款人    :param chamberlain_money: 收款人首款金额    :return:    """    file = os.path.join(setting.Path_base, "db", "golden_info.txt")  # 1.获取金额的文件路径    res_dic = {}    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            res = lines.strip().split(",")            res_dic[res[0]] = res[1]        print(res_dic)        money = float(res_dic[token])        # print(type(money))        # print(money)        # print(chamberlain_money)        if (money > 0) and (float(chamberlain_money) <= money):  # 1.判断用户余额是否充足            # print(money)            money -= float(chamberlain_money)  # 2.减转账用户金额            res_dic[token] = money            chamberlains = float(res_dic[chamberlain])            chamberlains += float(chamberlain_money)  # 3.加收款用户金额            res_dic[chamberlain] = chamberlains  # 4.更新字典数据            # print(res_dic)        else:            print("余额不足".center(50, "*"))    with open(file=file, mode="wt", encoding="utf8") as fs:  # 再次打开以qidengfeng',89991.0 的格式写入        # for k, v in enumerate(res_dic):        for k in res_dic.items():            # print(k)            fs.write(f"{k[0]},{k[1]}\n")            # print(chamberlain)    print(f"尊敬的用户{token}您向{chamberlain}于"          f"{time.strftime('%Y年%m月%d日-%H时%M分%S秒')},"          f"转账{chamberlain_money}元，余额{res_dic[token]}元")    Logging_info(f"尊敬的用户{token}您向{chamberlain}于"                 f"{time.strftime('%Y年%m月%d日-%H时%M分%S秒')},"                 f"转账{chamberlain_money}元，余额{res_dic[token]}元")def repayment(usname, repayment):    """    :param usname: 还款人    :param repayment: 还款金额    :return:    """    file = os.path.join(setting.Path_base, "db", "golden_info.txt")    dict_l = {}    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            res = lines.strip().split(",")            dict_l[res[0]] = res[1]        if float(repayment) > 0:            money = float(dict_l[usname])            dict_l[usname] = money + float(repayment)            print(dict_l)        f.seek(0)    with open(file=file, mode="wt", encoding="utf8") as f:        for i in dict_l:            print(i, dict_l[i])            f.write(f"{i},{dict_l[i]}\n")def withdraw_money(token, money):  # 取款数据操作    """    :param token: 取款人用户名    :param money: 取款金额    :return: 保存日志    """    file = os.path.join(setting.Path_base, "db", "golden_info.txt")    dict_l = {}    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            res = lines.strip().split(",")            dict_l[res[0]] = res[1]        if float(money) > 0:            oldy_moneys = float(dict_l[token])            print(money)            dict_l[token] = oldy_moneys - float(money)            print(dict_l, dict_l[token])            ftime = time.strftime("%Y年%m月%d日-%H时%M分%S秒")            Logging_info(f"尊敬的用户{token},您于{ftime}取款{money}元,余额{dict_l[token]}元")    with open(file=file, mode="wt", encoding="utf8") as f:        for i in dict_l:            # print(i,dict_l[i])            f.write(f"{i},{dict_l[i]}\n")def shopping_money(token, money):  # 购物扣款数据操作    """    :param token: 购物人用户名    :param money: 购物金额    :return: 保存日志    """    file = os.path.join(setting.Path_base, "db", "golden_info.txt")    dict_l = {}    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            res = lines.strip().split(",")            dict_l[res[0]] = res[1]        if float(money) > 0:            oldy_moneys = float(dict_l[token])            # print(money)            dict_l[token] = oldy_moneys - float(money)            # print(dict_l, dict_l[token])            ftime = time.strftime("%Y年%m月%d日-%H时%M分%S秒")            Logging_info(f"尊敬的用户{token},您于{ftime}购物扣除{money}元,余额{dict_l[token]}元")    with open(file=file, mode="wt", encoding="utf8") as f:        for i in dict_l:            # print(i,dict_l[i])            f.write(f"{i},{dict_l[i]}\n")def View_flow(token):    """    :param token: 用户名    :return: 返还list 用户日志信息    """    ftime = time.strftime("%Y-%m-%d.out")    file = os.path.join(setting.Path_base, "logs", ftime)    user_info_list = []    with open(file=file, mode="rt", encoding="utf8") as f:        for lines in f:            if token in lines:                print(lines)                user_info_list.append(lines)    return user_info_listdef select_commodity():#查看所有商品信息    file = os.path.join(setting.Path_base, "db", "User_purchase_record.json")    with open(file=file, mode="rt", encoding="utf8") as f:        res=json.load(f)#反序列化json对象        print(res)        for index,key in enumerate(res):            print("*"*20,f"商品种类编号:{index},商品种类:{key}","*"*20)            for k ,v in enumerate(res[key]):                print(f"商品编号:{k},商品名称:{v},商品价格:{res[key][v]}元")def shopping_cart(token, shopping_class,shopping_car,shopping_num):#购买商品    """    :param token: 用户名    :param shopping_class: 商品种类编号    :param shopping_car: 商品编号    :param shopping_num: 需要购买的商品数量    :return:    """    file = os.path.join(setting.Path_base, "db", "User_purchase_record.json")    with open(file=file, mode="rt", encoding="utf8") as f:        res = json.load(f)  # 反序列化json对象        dict_species = {}        for index, key in enumerate(res):            print("*" * 20, f"商品种类编号:{index},商品种类:{key}", "*" * 20, )            dict_species[index] = key        print(dict_species)        if int(shopping_class) in dict_species:            """打印所有分区商品信息"""            # print(dict_species[0],"shangpin ")            shopping_info=res[dict_species[int(shopping_class)]]            list=[]            for index,k in enumerate(shopping_info):#1.打印所有分区商品信息                print(f"商品编号:{index},商品名称:{k},商品价格:{shopping_info[k]}元")                list.append((index,shopping_info[k]))                # list.append(k)            # print(list)            if int(shopping_car) in range(len(list)):#2.判断输入的商品编号是否存在                #3.商品编号存在，进行购买，扣除用户的账户余额                shopping_money(token,list[int(shopping_car)][1]*int(shopping_num))#扣除购物消费：金额*数量                # print(shopping_car)                #4.购买的商品信息存入json文件中                file=os.path.join(setting.Path_base,"db","My_shopping_cart.txt")                with open(file,mode="a+",encoding="utf8") as f:                    #写入信息包含：用户名，商品名称，商品价格，已购买商品数量                    f.write(f"用户：{token},购买商品名称：{shopping_car},商品价格：{list[int(shopping_car)][1]},购买商品数量：{shopping_num}\n")                    # print(res)            else:print("商品编号不存在".center(50,"*"))        else:print("商品种类编号不存在".center(50,"*"))def select_shopping_cart(token):    """    :param token: 用户名    :return: 返还用户已购买的商品信息    """    file = os.path.join(setting.Path_base, "db", "My_shopping_cart.txt")    with open(file=file,mode="rt",encoding="utf8") as f:        list=[]        for lines in f:            res=lines.split(",",1)            if token in res[0]:                list.append(lines.strip())        return listif __name__ == '__main__':    # select_db_info()    # select_balance("qidengfeng")    # save_transfer("qidengfeng", "huangling", 3)    # repayment("huangling", "1200")    # withdraw_money("huangling", "1200")    # View_flow("qidengfeng")    # select_commodity()    # shopping_cart(1,2,3,1)    select_shopping_cart("qidengfeng")