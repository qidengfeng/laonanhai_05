#!/usr/bin/env python 3.9# coding:utf-8"""Project: 老男孩File: 作业数据.pyCreator: dengfengqiCreate time: 2021-02-28 21:51IDE: PyCharmIntroduction:"""# 练习一# # 写代码,有如下变量,请按照要求实现每个功能 （共6分，每小题各0.5分）# name = " aleX"# # 1)    移除 name 变量对应的值两边的空格,并输出处理结果# name=" qidengfeng   e  "# print(name.strip())# # 2)    判断 name 变量对应的值是否以 "al" 开头,并输出结果 # name = " aleX"# print(name.startswith("al"))#False# print(name.strip().startswith("al"))#去除空格# # 3)    判断 name 变量对应的值是否以 "X" 结尾,并输出结果 # name=" aleX"# print(name.strip().endswith("X"))# # 4)    将 name 变量对应的值中的 “l” 替换为 “p”,并输出结果# name=" aleX"# print(name.replace("l", "p"))# # 5)    将 name 变量对应的值根据 “l” 分割,并输出结果。# name=" aleX"# print(name.split("l"))# # 6)    将 name 变量对应的值变大写,并输出结果 # name=" aleX"# print(name.upper())# # 7)    将 name 变量对应的值变小写,并输出结果 # name=" aleX"# print(name.lower())# # 8)    请输出 name 变量对应的值的第 2 个字符?# name=" aleX"# print(name[2])# # 9)    请输出 name 变量对应的值的前 3 个字符?# name=" aleX"# print(name[1:3:1])# # 10)    请输出 name 变量对应的值的后 2 个字符? # name=" aleX"# print(name[-1:-3:-1])# print(name[3:5:1])# # 11)    请输出 name 变量对应的值中 “e” 所在索引位置? # name=" aleX"# for i in range(len(name)):#     if  name[i]=="e":#         print(i)# # 12)    获取子序列,去掉最后一个字符。如: oldboy 则获取 oldbo。# name=" aleX"# print(name[:-1])# 练习二# 1. 有列表data=['alex',49,[1900,3,18]]，分别取出列表中的名字，年龄，出生的年，月，日赋值给不同的变量# data=['alex',49,[1900,3,18]]# name,age,date_of_birth=data# year,month,day=date_of_birth# print(name,age,year,month,day)# 2. 用列表模拟队列# data=['alex',49,[1900,3,18]]# for d in data:#     print(d)# 3. 用列表模拟堆栈# data1=['alex',49,[1900,3,18]]# data2=['alex',49,data1]# del data1# print(data2[2])# 4. 有如下列表，请按照年龄排序（涉及到匿名函数）# l=[#     {'name':'alex','age':84},#     {'name':'oldboy','age':73},#     {'name':'egon','age':18},# ]# s=[]# for i in range(len(l)):#     print(l[i]['age'])#     s.append(l[i]['age'])## l.sort()# print(l[])# print(item['age'])# l.sort(key=lambda item:item['age'])# l.sort(lambda :for i in l)# print(l)# 答案：# l.sort(key=lambda item:item['age'])# print(l)# 练习三# #简单购物车,要求如下：# 实现打印商品详细信息， 用户输入商品名和购买个数，# 则将商品名，价格，购买个数加入购物列表，# 如果输入为空或其他非法输入则要求用户重新输入　　## msg_dic={# 'apple':10,# 'tesla':100000,# 'mac':3000,# 'lenovo':30000,# 'chicken':10,# }# # goods_l=[]#商品名，价格，购买个数## goods_l=[]# while True:#     # 输入商品名和购买个数#     for k,v in msg_dic.items():#         print(f"商品名称{k}商品价格{v}")#     commodity =input("输入商品名称：>>").strip()#     if  commodity not in msg_dic.keys():#         print("请输入商品名称")#         continue#     price =input("请输入购买商品数量:>>").strip()#     if not price.isdigit():#         print("请输入整数")#         continue#     if  int(price)>0:#         goods_l.append((commodity,msg_dic[commodity],price))#     print(goods_l,"++++")# 练习四# 1 有如下值集合 [11,22,33,44,55,66,77,88,99,90...]，# 将所有大于 66 的值保存至字典的第一个key中，# 将小于 66 的值保存至第二个key的值中# 即：{'k1': 大于66的所有值, 'k2': 小于66的所有值}# res=[11,22,33,44,55,66,77,88,99,90]# value=[]# value1=[]# dic={}# dic.update(k1=2)# for i in res:#     if i >66:#         dic.update(k1=value)#         value.append(i)#     elif i<66:#         dic.update(k2=value1)#         value1.append(i)# print(dic)# 2 统计s='hello alex alex say hello sb sb'中每个单词的个数# 结果如：{'hello': 2, 'alex': 2, 'say': 1, 'sb': 2}# s='hello alex alex say hello sb sb'# s=s.split()# dic={}# list=[]# for i in range(len(s)):#     list.append((s[i],len(s[i])))# print(dict(list))# 练习五# 一.关系运算# 　　有如下两个集合，pythons是报名python课程的学员名字集合，linuxs是报名linux课程的学员名字集合# 　　pythons={'alex','egon','yuanhao','wupeiqi','gangdan','biubiu'}# 　　linuxs={'wupeiqi','oldboy','gangdan'}# # 　　1. 求出即报名python又报名linux课程的学员名字集合# pythons={'alex','egon','yuanhao','wupeiqi','gangdan','biubiu'}# linuxs={'wupeiqi','oldboy','gangdan'}# # s= set()# # for i in pythons:# #     if  i in linuxs:# #         s.add(i)# # print(s)# s=set.intersection(pythons,linuxs)# print(s)# 　　2. 求出所有报名的学生名字集合# pythons={'alex','egon','yuanhao','wupeiqi','gangdan','biubiu'}# linuxs={'wupeiqi','oldboy','gangdan'}# pythons.update(linuxs)# print(pythons)# 　　3. 求出只报名python课程的学员名字# pythons={'alex','egon','yuanhao','wupeiqi','gangdan','biubiu'}# linuxs={'wupeiqi','oldboy','gangdan'}# pythons.difference_update(linuxs)# print(pythons)# 　　4. 求出没有同时这两门课程的学员名字集合# pythons={'alex','egon','yuanhao','wupeiqi','gangdan','biubiu'}# linuxs={'wupeiqi','oldboy','gangdan'}# res=pythons.difference(linuxs)# res.update(linuxs.difference(pythons))# print(res)# 二.去重## 　　 1. 有列表l=['a','b',1,'a','a']，列表元素均为可hash类型，去重，得到新列表,且新列表无需保持列表原来的顺序# l=['a','b',1,'a','a']# print(list(set(l)))# 　　 2.在上题的基础上，保存列表原来的顺序 2@@@@@@# s=['a','b',1,'a','a']# l1=[]# for i in s:#     if i not in l1:#         l1.append(i)# print(l1)#方法二:借助集合# l=['a','b',1,'a','a']# l1=[]# s=set()# for i in l:#     if i not in s:#         s.add(i)#         l1.append(i)# print(l1)# 　　 3.去除文件中重复的行，肯定要保持文件内容的顺序不变# import os# with open('db.txt','r',encoding='utf-8') as read_f,\#         open('.db.txt.swap','w',encoding='utf-8') as write_f:#     s=set()#     for line in read_f:#         if line not in s:#             s.add(line)#             write_f.write(line)# os.remove('db.txt')# os.rename('.db.txt.swap','db.txt')# 　　 4.有如下列表，列表元素为不可hash类型，去重，得到新列表，且新列表一定要保持列表原来的顺序# l=[#     {'name':'egon','age':18,'sex':'male'},#     {'name':'alex','age':73,'sex':'male'},#     {'name':'egon','age':20,'sex':'female'},#     {'name':'egon','age':18,'sex':'male'},#     {'name':'egon','age':18,'sex':'male'},# ]# s=set()# l1=[]# for i in l:#     # print(i)#     var=(i["name"],i["age"],i["sex"])#     if var not in s:#         s.add(var)#         l1.append(var)# print(l1)